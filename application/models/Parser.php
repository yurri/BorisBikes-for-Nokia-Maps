<?php/*Parses the web page with coordinates and provides data in a form ready to work with*/class Parser {  private $__url = null; // page URL  private $__rawContent = null; // holds page raw content as retrieved by Zend client    public function __construct($url) {    $this->__url = $url;        $this->reload();  }    // accesses the page that contains the coordinates and stores its content  public function reload() {    // again, not necessary to initialise in PHP, but I'm used to it    $client = null;          // accesses the page and stores its content    try {      $client = new Zend_Http_Client($this->__url);        } catch (Zend_Http_Client_Exception $e) {      throw new Parser_Exception('Invalid source page URL!');    }        try {      $response = $client->request();    } catch (Zend_Http_Exception $e) {      throw new Parser_Exception('Source page unavailable by the URL provided!');    }        $this->__rawContent = $response->getBody();  }    // parses the stored content returning it in a form of a PHP structure  public function parseLocationsData($regexp) {    if ($this->__rawContent === null) {      // will never happen in this implementation but will keep us safer in future      $this->refresh();    }        $stations = array();        if (preg_match_all($regexp, $this->__rawContent, $matches, PREG_SET_ORDER)) {      foreach($matches as $match) {        // adding another recognised docking station to the list        array_push($stations, array(          'name'      => $match[1],          'latitude'  => $match[2],          'longitude' => $match[3]        ));      }    } else {      throw new Parser_Exception('Page was probably redesigned, adjust your regular expression!');    }        return $stations;      }}?>