<?php/*Downloads locations data in a form of an LDB file ready to be used with Nokia Maps*/class Downloader_LDB extends Downloader {  // it took time to find the exact limits as it wasn't documented by Nokia  const LANDMARK_NAME_LENGTH  = 27;  const LANDMARK_PRECISION    = 8;  // prefix to add to every landmark name to allow easier sorting in Nokia Maps  const LANDMARK_PREFIX = 'Bikes: ';    // doesn't really matter, the only thing, it shouldn't overlap with standard Nokia IDs  const LANDMARK_CATEGORY_ID = '4500';    public function __construct() {  }    // redefining the MIME type  protected function getMIMEType() {    return 'data/ldb';  }    // redefining the extension  protected function getExtension() {    return 'ldb';  }    // redefining content output function  protected function downloadContent($stations) {    // the format was reverse engineered from Nokia own data. took some time.      // printing LDB header    echo '<?xml version="1.0" encoding="UTF-8"?>' . "\n";    echo '<lm:lmx xmlns:lm="http://www.nokia.com/schemas/location/landmarks/1/0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.nokia.com/schemas/location/landmarks/1/0/lmx.xsd">' . "\n";    echo '<lm:landmarkCollection>' . "\n";        // prefix to be added to landmark names    $prefix = 'Bikes: ';        // printing LDB entries    foreach ($stations as $station) {      // trying to shorten the names because there is limitation for a landmark title      $station['name'] = preg_replace(array('/Road/', '/Street/', '/Square/', '/ ,/'), array('Rd', 'St', 'Sq', ','), $station['name']);		      // if the name is still too long, truncating      if (strlen($station['name']) > (self::LANDMARK_NAME_LENGTH - strlen(self::LANDMARK_PREFIX))) {        $station['name'] = substr($station['name'], 0, (self::LANDMARK_NAME_LENGTH - strlen(self::LANDMARK_PREFIX)));      }            $station['latitude'] = round($station['latitude'], self::LANDMARK_PRECISION);      $station['longitude'] = round($station['longitude'], self::LANDMARK_PRECISION);            echo '<lm:landmark>';      echo '<lm:name>' . self::LANDMARK_PREFIX . $station['name'] . '</lm:name>';      echo '<lm:coordinates>';      echo '<lm:latitude>' . $station['latitude'] . '</lm:latitude>';      echo '<lm:longitude>' . $station['longitude'] . '</lm:longitude>';            echo '</lm:coordinates><lm:category><lm:id>' . self::LANDMARK_CATEGORY_ID . '</lm:id><lm:name>Transport</lm:name></lm:category></lm:landmark>';      echo "\n";    }        // printing LDB footer    echo '</lm:landmarkCollection>' . "\n";    echo '</lm:lmx>' . "\n";  }}?>